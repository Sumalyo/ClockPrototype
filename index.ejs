<!DOCTYPE html>
<html lang="en">
<head>
  
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Minimalist Clock with Weather & Background</title>
  <link href="https://fonts.googleapis.com/css2?family=Roboto+Mono:wght@400;700&display=swap" rel="stylesheet">
  <style>
    :root {
      --bg-overlay: rgba(0, 0, 0, 0.4);
      --text-color: #fff;
    }

    body, html {
      margin: 0;
      padding: 0;
      height: 100%;
      width: 100%;
      font-family: 'Roboto Mono', monospace;
      color: var(--text-color);
      background: url('<%= backgroundUrl %>') no-repeat center center fixed;
      background-size: cover;
      display: flex;
      justify-content: center;
      align-items: center;
      text-align: center;
      overflow: hidden;
      transition: background-image 1s ease-in-out;
    }

    .overlay {
      background: var(--bg-overlay);
      padding: 30px 50px;
      border-radius: 16px;
      backdrop-filter: blur(10px);
      box-shadow: 0 8px 24px rgba(0,0,0,0.3);
      transition: background 0.5s ease-in-out;
      min-width: 50%;
      min-height: 30%;
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
    }

    .clock {
      font-size: 5em;
      font-weight: bold;
    }

    .date {
      font-size: 1.4em;
      margin-top: 10px;
    }

    .weather {
      margin-top: 10px;
      font-size: 1.2em;
    }

    @media (max-width: 600px) {
      .clock {
        font-size: 2.5em;
      }
      .date, .weather {
        font-size: 1em;
      }
    }
  </style>
</head>
<body>
  <div class="overlay">
    <div class="clock" id="clock">00:00:00</div>
    <div class="date" id="date"></div>
    <% if (weather) { %>
      <div class="weather" id="weather"><%= weather.city %>: <%= weather.temp %>°C, <%= weather.description %></div>
    <% } %>
  </div>

  <script>
    // function updateClock() {
      const offsetMinutes = parseInt('<%= utcOffset %>', 10);
      const clockEl = document.getElementById('clock');
      const nowUTC = new Date();
      //console.log(nowUTC.getTime())
      //const local = new Date(nowUTC.getTime() + offsetMinutes * 60000);
      const local = new Date(Date.UTC(
        nowUTC.getUTCFullYear(),
        nowUTC.getUTCMonth(),
        nowUTC.getUTCDate(),
        nowUTC.getUTCHours(),
        nowUTC.getUTCMinutes() + offsetMinutes,
        nowUTC.getUTCSeconds()
      ));
      const hours = local.getHours().toString().padStart(2, '0');
      const minutes = local.getMinutes().toString().padStart(2, '0');
      const seconds = local.getSeconds().toString().padStart(2, '0');
      clockEl.textContent = `${hours}:${minutes}:${seconds}`;
      // console.log({'Clock Debug', {
      //   nowUTC: nowUTC.toISOString(),
      //   offsetMinutes,
      //   localTime: local.toISOString()
      // }});
    //       })
    //       .catch(() => {
    //         clockEl.textContent = now.toLocaleTimeString();
    //       });
    //   } catch (err) {
    //     console.error('Error fetching local time:', err);
    //     clockEl.textContent = now.toLocaleTimeString();
    //   }
    // }
    

    function updateClock() {
      const offsetMinutes = parseInt('<%= utcOffset %>', 10);
      const clockEl = document.getElementById('clock');
      const nowUTC = new Date();
      //const local = new Date(nowUTC.getTime() + offsetMinutes * 60000);
      const local = new Date(Date.UTC(
        nowUTC.getUTCFullYear(),
        nowUTC.getUTCMonth(),
        nowUTC.getUTCDate(),
        nowUTC.getUTCHours(),
        nowUTC.getUTCMinutes() + offsetMinutes,
        nowUTC.getUTCSeconds()
      ));
      //console.log(offsetMinutes)
      //console.log(nowUTC.getTime())
      //console.log(nowUTC.getTime() + offsetMinutes * 60000)
      //console.log(nowUTC.getTime())
      
      const hours = local.getHours().toString().padStart(2, '0');
      const minutes = local.getMinutes().toString().padStart(2, '0');
      const seconds = local.getSeconds().toString().padStart(2, '0');
      clockEl.textContent = `${hours}:${minutes}:${seconds}`;
    }

    setInterval(updateClock, 1000);
    updateClock();

    function updateDate() {
      const dateEl = document.getElementById('date');
      const now = new Date();
      const dateStr = now.toLocaleDateString(undefined, {
        weekday: 'long', year: 'numeric', month: 'long', day: 'numeric'
      });
      dateEl.textContent = dateStr;
    }

    updateDate();

    function refreshContent() {
      fetch('/refresh', { method: 'POST' })
        .then(response => response.json())
        .then(data => {
          document.body.style.backgroundImage = `url('${data.background_url}')`;
          const weatherEl = document.getElementById('weather');
          if (data.weather) {
            weatherEl.textContent = `${data.weather.city}: ${data.weather.temp}°C, ${data.weather.description}`;
          }
        })
        .catch(error => console.error('Error:', error));
    }

    function toggleTheme() {
      const root = document.documentElement;
      const isDark = getComputedStyle(root).getPropertyValue('--bg-overlay').includes('0.4');
      if (isDark) {
        root.style.setProperty('--bg-overlay', 'rgba(255, 255, 255, 0.2)');
        root.style.setProperty('--text-color', '#000');
      } else {
        root.style.setProperty('--bg-overlay', 'rgba(0, 0, 0, 0.4)');
        root.style.setProperty('--text-color', '#fff');
      }
    }

    document.addEventListener('keydown', (e) => {
      if (e.key.toLowerCase() === 'r') {
        refreshContent();
      }
      if (e.key.toLowerCase() === 't') {
        toggleTheme();
      }
    });
  </script>
</body>
</html>
